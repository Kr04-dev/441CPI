/*/////////////////////////////////////////////////////////////////////////
                          Workshop - #5 (P2)
Full Name  :Timothy Lee
Student ID#:177133212
Email      :glee89@myseneca.ca
Section    :NRA
Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

1. Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers
(constant literals)? Using the details of this workshop, describe at least three advantages this provides us?

	1. Readability: Hardcoding values (such as 1, 12, 2012, 2022, etc.) directly into the code can make it 
	difficult to understand what these numbers represent. By using descriptive variable names or macros 
	(like MIN_YEAR, MAX_YEAR, JAN, DEC), the code becomes more self-explanatory. For example, if 
	(year < MIN_YEAR || year > MAX_YEAR) is more readable than if (year < 2012 || year > 2022) because 
	it's clear that MIN_YEAR and MAX_YEAR are boundaries for the acceptable year range.

	2. Maintainability: If you need to change the value of a magic number, you might need to find and 
	update it at multiple places in your code, which is tedious and error-prone. If the value is represented 
	as a variable or macro, you only need to update it in one place. For example, if the minimum and maximum 
	acceptable years change, you only need to update the values of the macros MIN_YEAR and MAX_YEAR.

	3. Reducing Errors: Directly coding "magic" numbers can increase the risk of typographical errors and 
	other mistakes. It's easy to mistype a number, and these errors can be difficult to spot. When you use a 
	variable or macro, you're less likely to make this type of mistake.

2. The rating values entered by the user required iteration to perform basic validations with each iteration
concentrated on testing for values to be within a specific range. Why do we not include additional logic that sums
and performs the average? Instead, the sum and average logic is placed outside of any validation routine. Briefly
explain two reasons why this is better design and refer to the details of this workshop to justify your answer.

	1. Optimizing Computation: It's often more efficient to sum up values and calculate averages after all data 
	has been validated and collected. This approach helps to optimize the computations and avoid unnecessary 
	calculations with invalid data. In the provided code, we first make sure the rating values are valid, then 
	we add them to our running total. Once all valid ratings have been collected, we perform the averaging 
	computation. This approach is efficient because it doesn't involve performing the summation and averaging 
	during each validation step, which would result in unnecessary computations, particularly if invalid data 
	is encountered.

	2. Separation of Concerns: One of the key principles in software design is the "Separation of Concerns" 
	principle. It suggests that each part of the code should be responsible for a distinct piece of functionality. 
	By keeping the validation logic separate from the summation and averaging logic, the code is better organized, 
	more maintainable, and easier to understand. The validation step in the code is primarily concerned with 
	ensuring that user input is within a valid range. The sum and average calculations are distinct tasks that 
	rely on the user input being valid, but they're not concerned with validating that input. They should only 
	be performed after all validation checks have passed. Mixing these concerns can lead to code that's harder to 	
	understand, maintain, and debug.