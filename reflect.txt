/*/////////////////////////////////////////////////////////////////////////
                          Workshop - #4 (reflection)
Full Name  :Timothy Lee
Student ID#:177133212
Email      :glee89@myseneca.ca
Section    :NRA

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

1. With the completion of this workshop, you must have begun to appreciate why code formatting is important.
Explain how you made your code – especially the iteration and selection logic parts – easy to read and maintain.

	We need 6 steps to make the code and they are
		1.Indentation and Formatting 
		2.Descriptive Variable Names 
		3.Modularization
		4.Error Handling and User Feedback
		5.Conditional Statements
		6.Comments
	and I haved used
		1. Indentation and Formatting: The code is properly indented and formatted, with consistent 
		spacing and line breaks. This improves readability and helps to visually separate different 
		sections of the code.
		2. Descriptive Variable Names: Variable names such as apples, oranges, pears, tomatoes, cabbages, 
		etc., are used to represent the quantities of each item. These names are meaningful and help 
		to understand the purpose of each variable.
		3. Modularization: The code is divided into logical sections using functions or loops. Each item's 
		input validation and picking logic are contained within separate do-while loops, making it easier 
		to understand and modify the code for each specific item.
		5. Conditional Statements: The conditional statements (if-else) are structured in a clear and 
		consistent manner. Each item's picking logic is contained within a separate if statement, 
		which makes it easier to understand and modify the code for each specific item.
		6. Comments: The code includes comments to explain the purpose of different sections, inputs, 
		and outputs. The comments at the beginning provide an overview of the program and include 
		important information such as my name, student ID, and authenticity declaration

	Therefore, later on I can improve my formatting by having 'Error Handling and User Feedback' in my code.

2. Nested logic is an important feature of programming in any language. Identify and briefly discuss the biggest
impact on how this workshop could be coded if nesting were not possible.

	It would have firstly increased code complexity. Without nesting, the code would need to use multiple flags or 
	variables to keep track of the program state and determine which section of code to execute next. This 
	would result in more complex and convoluted logic. secondly repetitive, limited/reduced code. The code would 
	need to be duplicated multiple times to handle each product separately. Each product's input, validation, 
	picking, and completion check would have to be implemented separately, leading to redundant code. and finaly,
	I would say Increased maintenance effort: With nested logic, it is easier to identify and isolate specific 
	sections of code. Without nesting, modifications or updates to one part of the code would require manual 
	changes in multiple locations, leading to increased maintenance effort and a higher risk of introducing errors.

3. Consider the following scenario: you are programming logic that requires a user to input a value between 1 and 5,
and for each value within that range, you had to perform something unique. You would have to apply selection to 
validate the entered values so you can implement the given logic for a specific entered range value. Explain why is
it inefficient to achieve this using a series of “if” optional path constructs instead of the preferred 
“if/else if…” alternative path logic?

	Logical clarity: The "if/else if" structure clearly expresses that only one of the conditions will be true 
	and will have an action associated with it. A series of "if" statements does not convey the same information. 
	This can lead to bugs if conditions are not mutually exclusive, as more than one block of code can be executed.

	Performance: When using "if" statements, every condition will be evaluated, even if a previous one was 
	found to be true. In contrast, using "if/else if" constructs will break out of the checking as soon as one 
	true condition is found. This can make a significant performance difference if there are many conditions to 
	check or if the condition checking is computationally expensive.

	Readability: A code with "if/else if" statements tends to be more readable, as it makes it clear that only 
	one of the conditions will be executed, which simplifies understanding the code.

	Maintenance: The "if/else if" structure is easier to maintain because you don't need to ensure that the 
	conditions are mutually exclusive. If you later decide to add, remove, or change a condition, you have less 
	risk of inadvertently causing a bug.	